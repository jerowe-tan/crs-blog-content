---
interface Props {
  id?: string,
}
const { id = "password-strength" } = Astro.props;
---


<astro-password-strength>
  <input id={id} type="password" class="hidden"/>
  <div class="password-strength rounded-full h-1 w-full flex justify-between bg-gray-300 overflow-hidden" >
    <div class="basis-full border-r border-white h-full"></div>
    <div class="basis-full border-r border-l border-white h-full"></div>
    <div class="basis-full border-r border-l border-white h-full"></div>
    <div class="basis-full border-r border-l border-white h-full"></div>
    <div class="basis-full border-l border-white h-full"></div>
  </div>
  <div class="strength-label text-xs text-gray-300 min-h-4 font-bold"></div>
</astro-password-strength>

<script>
//---> Import
import { ElementMaker } from "@jsarmyknife/native--dom";
import { passwordCheckSimplify } from "@jsarmyknife/native--cryptographic";

ElementMaker("astro-password-strength", (element)=>{
if(element == null) return;

//---> Const
const inputElement = element.querySelector("input") as HTMLInputElement;
const passwordStrength = element.querySelector(".password-strength") as HTMLDivElement;
const strengthLabel = element.querySelector(".strength-label") as HTMLDivElement;


//---> Event
inputElement.addEventListener("input", (e: Event) => {
  if(inputElement.value){  
    const result = passwordCheckSimplify(inputElement.value);
    Array.from(passwordStrength.children).forEach((basis, index)=>{
      if(result.rate > index){
        (basis as HTMLElement).style.backgroundColor = result.color;
      }else{
        (basis as HTMLElement).style.backgroundColor = "transparent";
      }
    });
    strengthLabel.textContent = result.name;
    strengthLabel.style.color = result.color;
  }else{
    Array.from(passwordStrength.children).forEach((basis)=>{
      (basis as HTMLElement).style.backgroundColor = "transparent";
    });
    strengthLabel.style.color = "auto";
    strengthLabel.textContent = "";
  }
});

}, true);
</script>